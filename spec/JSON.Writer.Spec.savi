:class _WriterExampleClass
  :var name String
  :var admin (Bool | None)
  :new (@name, admin (Bool | None) = None)
    @admin = admin // TODO: remove this intermediate variable

  :fun trace_data(trace TraceData.Observer) None
    trace.object(identity_digest_of @) -> (
      trace.property("name", @name)
      try trace.property("admin", @admin.not!(None))
    )

:class JSON.Writer.Spec
  :is Spec
  :const describes: "JSON.Writer"

  :it "writes JSON"
    streams = ByteStream.Pair.new
    write = JSON.Writer.new(streams.write)

    write.array -> (write |
      write.child -> (write |
        write.object -> (write |
          write.string("name", "Alice")
          write.bool("admin", True)
        )
      )
      write.child -> (write |
        write.object -> (write |
          write.string("name", "Bob")
        )
      )
      write.child -> (write |
        write.object -> (write |
          write.string("name", "Cyril")
          write.bool("admin", False)
        )
      )
    )

    assert no_error: streams.write.flush!
    assert: streams.read.extract_all.as_string == String.join([
      <<<[>>>
      <<<{"name":"Alice","admin":true},>>>
      <<<{"name":"Bob"},>>>
      <<<{"name":"Cyril","admin":false}>>>
      <<<]>>>
    ])

  :it "writes pretty JSON"
    streams = ByteStream.Pair.new
    write = JSON.Writer.new_pretty(streams.write)

    write.array -> (write |
      write.child -> (write |
        write.object -> (write |
          write.string("name", "Alice")
          write.bool("admin", True)
        )
      )
      write.child -> (write |
        write.object -> (write |
          write.string("name", "Bob")
        )
      )
      write.child -> (write |
        write.object -> (write |
          write.string("name", "Cyril")
          write.bool("admin", False)
        )
      )
    )

    assert no_error: streams.write.flush!
    assert: streams.read.extract_all.as_string == <<<
      [
        {
          "name": "Alice",
          "admin": true
        },
        {
          "name": "Bob"
        },
        {
          "name": "Cyril",
          "admin": false
        }
      ]
    >>>

  :it "writes every JSON primitive data type"
    streams = ByteStream.Pair.new
    write = JSON.Writer.new(streams.write)

    write.null,       streams.write.push('\n')
    write.bool(True), streams.write.push('\n')
    write.u8(8),      streams.write.push('\n')
    write.u16(16),    streams.write.push('\n')
    write.u32(32),    streams.write.push('\n')
    write.u64(64),    streams.write.push('\n')
    write.i8(-8),     streams.write.push('\n')
    write.i16(-16),   streams.write.push('\n')
    write.i32(-32),   streams.write.push('\n')
    write.i64(-64),   streams.write.push('\n')
    write.f32(32.5), streams.write.push('\n')
    write.f64(64.5), streams.write.push('\n')
    write.string("some string")

    assert no_error: streams.write.flush!
    assert: streams.read.extract_all.as_string == <<<
      null
      true
      8
      16
      32
      64
      -8
      -16
      -32
      -64
      32.5
      64.5
      "some string"
    >>>

  :it "writes every JSON primitive data type in an array"
    streams = ByteStream.Pair.new
    write = JSON.Writer.new(streams.write)

    write.array -> (write |
      write.null
      write.bool(True)
      write.u8(8)
      write.u16(16)
      write.u32(32)
      write.u64(64)
      write.i8(-8)
      write.i16(-16)
      write.i32(-32)
      write.i64(-64)
      write.f32(32.5)
      write.f64(64.5)
      write.string("some string")
    )

    assert no_error: streams.write.flush!
    assert: streams.read.extract_all.as_string == <<<
      [null,true,8,16,32,64,-8,-16,-32,-64,32.5,64.5,"some string"]
    >>>

  :it "writes every JSON primitive data type in an object"
    streams = ByteStream.Pair.new
    write = JSON.Writer.new_pretty(streams.write)

    write.object -> (write |
      write.null("A")
      write.bool("B", True)
      write.u8("C", 8)
      write.u16("D", 16)
      write.u32("E", 32)
      write.u64("F", 64)
      write.i8("G", -8)
      write.i16("H", -16)
      write.i32("I", -32)
      write.i64("J", -64)
      write.f32("K", 32.5)
      write.f64("L", 64.5)
      write.string("M", "some string")
    )

    assert no_error: streams.write.flush!
    assert: streams.read.extract_all.as_string == <<<
      {
        "A": null,
        "B": true,
        "C": 8,
        "D": 16,
        "E": 32,
        "F": 64,
        "G": -8,
        "H": -16,
        "I": -32,
        "J": -64,
        "K": 32.5,
        "L": 64.5,
        "M": "some string"
      }
    >>>

  :it "writes pretty JSON from traced data"
    streams = ByteStream.Pair.new
    write = JSON.Writer.new_pretty(streams.write)

    alice = _WriterExampleClass.new("Alice", True)
    bob   = _WriterExampleClass.new("Bob")
    cyril = _WriterExampleClass.new("Cyril", False)

    write.trace([alice, bob, cyril])

    assert no_error: streams.write.flush!
    assert: streams.read.extract_all.as_string == <<<
      [
        {
          "name": "Alice",
          "admin": true
        },
        {
          "name": "Bob"
        },
        {
          "name": "Cyril",
          "admin": false
        }
      ]
    >>>

  :it "writes every traceable primitive data type"
    streams = ByteStream.Pair.new
    trace = JSON.Writer.TraceData.Observer.new(streams.write)

    trace.array(0) -> (
      trace.array_element(None)
      trace.array_element(True)
      trace.array_element(U8[8])
      trace.array_element(U16[16])
      trace.array_element(U32[32])
      trace.array_element(U64[64])
      trace.array_element(I8[-8])
      trace.array_element(I16[-16])
      trace.array_element(I32[-32])
      trace.array_element(I64[-64])
      trace.array_element(F32[32.5])
      trace.array_element(F64[64.5])
      trace.array_element(b"some bytes")
      trace.array_element("some string")
    )

    assert no_error: streams.write.flush!
    assert: streams.read.extract_all.as_string == <<<
      [null,true,8,16,32,64,-8,-16,-32,-64,32.5,64.5,"some bytes","some string"]
    >>>

  :it "writes NaN, Infinity, and -Infinity values as null"
    streams = ByteStream.Pair.new
    trace = JSON.Writer.TraceData.Observer.new(streams.write)

    trace.array(0) -> (
      trace.array_element(F32.nan)
      trace.array_element(F32.infinity)
      trace.array_element(F32.neg_infinity)
      trace.array_element(F64.nan)
      trace.array_element(F64.infinity)
      trace.array_element(F64.neg_infinity)
    )

    assert no_error: streams.write.flush!
    assert: streams.read.extract_all.as_string == <<<
      [null,null,null,null,null,null]
    >>>
